------------------------------------------------------------
    JAVASCRIPT - Dynamically Programmed Language concepts
------------------------------------------------------------    
    1. Node JS : Run time environment for JS outside the browser
        -installing node JS
        - checking node js version : node -version
        - execute js file using node js : node file-name.js
    2. Basic concepts JS
        -Displaying contents : console.log(content)
        -to check type of a content : typeof
        -to join different type of data in js : Concatenation
            -use comma to seperate
            -use + to join data is 'concatenation'
            -Template Literals : using back tick `
        - Data types in JS
            -Nmuber
            - String : contents within a quotes
            - Boolean : true(1) / false(0)
            -undefined
            -Object
        - Variables : used to store data    
            -create variables :
            -variablesName = value
            -var variablesName
        -Identifiers : are rules to set up name for variables
        -  Hoisting : using a data before creation it.
        - Difference between
            - Ternery operators : condition?statement  when condition become true:statement when condi
        - conditional statements
            -if statements :
                - syntax : if()condition{if body executes when condition become true}
            - if-else statements
                -syntax : if()condition{if body executes when condition become true}else{
                            else body executes when condition is false}
           - else if ladders
           - switch statements
    - Looping statements : same task should repeat multiple times
    ---------------------------------------------------------------
        -while Loop :
            - syntax :
                1. initialize a variables
                2. while (condition should use the variable that Initialised){
                    task to be repeated when condition become true
                3. Change the value of condition variable inside loop
                }
        -for loop
            - syntax : for (Initialize a variable;Condition should use variable that Initialised;Change the value of condition variable ){
                task to be repeated when condition become true
            }
            - break statement : used to exit from a loop
            -continue : used to skip certain values in a loop
        - Nested Loop :  A loop inside another loop.
            -outerloop{
                innerloop{
                   
                }
            }

    - Functions : used to perform specific tasks
        - Function Definition : Defining task to be performed
            - syntax : function function-name(arg1,....argn){
                function body - here we have to design task
            }
        - Function Call : to execute function we have to Call
            - syntax : function-name(p1,.....pn)
        - RETURN statements
        - Types of Functions
            - Arrow Functions : alternative of normal function Definition
                -syntax : var/let/const function-name = (arg1,....argn)=>{ function body - here we have to design task}
            - Predefined functions: console.log()
                                    -             - eval() : evaluate the expression.
            - CallBack function : a Function Definition inside another function call
            - Anonymous functions : Nameless function / self executing functions
            - Recursive Function : Calling the Function inside its own Definition
            - Nested Functions : A function definition inside another function definition
            - Closure property in JS : In nested function child function can access both its variable as well as
              its parent variable.
            - Currying functions : function used to transform the function with multiple argumennt into several     functions of single argument
            - Higher order functions : function that accept another function as an argument and return another function as result .
       
        ARRAY : It is used to store multiple values in a single variable
    -------------------------------------------------------------------------
        - Array Methods
            - push(item) : it used to insert item at the end of Array
           
            - unshift(item) : insert item at the starting of an Array
           
            - pop() : remove item at the end of an Array
           
            - shift() : remove item from the starting of an Array
           
            - sort(callback) : used to sort an array in ascending/ descending order
           
            - forEach() : alternative of for-of loop, to iterate an array and it WON'T RETURN anything
           
            - map(callabck) : RETURN a new array with values after applying mapping function to an existing array
           
            - filter(callback) : RETURN a new array with items satisfying the conditions applied to the existing array
           
            - find(callabck): RETURN a sinlge value with items satisfying the conditions applied to the existing array
           
            - reduce(callback) : it will return a sigle value like (largest/smallest/ total sum) after applying reduce function to an existing array
           
            - reduceRight(callback) :it will return a sigle value like (largest/smallest/ ) after applying reduce function to an existing array
           
            - some(callback) : return a boolean value after appliying a condition
           
            - flat(depth) : used to reduce dimension of an array.if depth is infinity then flat method always return a single dimensional array
           
            - includes(key) : used to return a aboolean value based on key present in the array or not
           
            - reverse() : used to reverse items in an array
           
            - indexOf() : return index of data present in the array
           
            - join(seperator) : return a string separated with seperator
           
            - slice(start,end) : used to display part of an array, the end value not display.
           
            - splice(start index,delete count) : used to remove/replace item from an array
           
            - concat(string) : used to join two array to single array
        String : Collection of characters and enclosed in either singlr or double quotes.
    ------------------------------------------------------------------------------------------
        -String Methods
            - substring()
            - slice() :
            - toUpperCase()
            - toLowerCase()
            - startsWith()
            - endsWith()
            - trim() : used to remove the unwanted wide space in a string starting/endingr
            - split() : convert a string into array.
                - split('') : covert it into array of characters
                - split(' ') : convert it into array of words.
            - includes()

        - Object : used to store multiple values, store data as key:value pair
            - create an object :{key:value}
            - to access values from an object :
                - use Bracket notation : object-name["key"]
                - use Dot notation : object-name.key
            - check a key present in an object :
                - operator ' in ' : "key" in object-name   and it return boolean
                - hasOwnProperty() : object-name.hasOwnProperty(key)
            - insert data to an object
                - object-name["key"] = value / object-name.key = value
                - Object-name.assign(target-object,source)
            - update value of an existing object
            - Object.keys(object-name): display all keys in an object
            - Object.values(object-name): display all values in an object
            - Object.entries(object-name): used to convert object to an array
            - delete keyword (delete object-name.key) : to delete key-value from an object
            - Object Destructuring : const {key1,key2,key3,........keyn} = object-name

            ----------How javascript is handling runtime errors---------------
                
            -Try-Catch-finally Block


            -OOPS : Object Oriented Programming Language
                  - class : Blue print of object
                  - Object : real world entity 
                  - Reference : used to link class with its properties
                  - constructor : It initializes the properties of the object.
                  - Methods: These are functions defined inside the class
                  - this() : used to link class and object
            -OOPs features 
                  - inheritance 
                       - classical inheritance : use extends keyword
                       - prototype inheritance : use __proto__ keyword
                  - polymorphism : use rest to implement
                  - Abstraction : Hiding the important data from user
                  - encapsulation : Data inside another data
            - Modules in JAVASCRIPT : used to communicate data from one js file to another
                  - export / export default  keyword : used to export data or function from a js file
                  - import keyword : to access the content exported from a js file 

             ------------------------------------------------------------
                        JAVASCRIPT - SCRIPTING Language
             ------------------------------------------------------------   
    1. Provide Behaviour to HTML elements 
    2. Applying javascript in webpage
             - internal js : using script tag to Defining js in html
             - external js : using script tag to link external js to html page
    3. DOM : document object model, which is an tree representation of webpage , every tree must has a single parent,js can access dom using document object
    4.DOM Method : Selecting HTML elements to js 
         - Use tag name : document.getElementByTagName("TagName")
         - Use tag Id : document.getElementByTagId("TagId")
         - Use class name : document.getElementByClassName("ClassName")
         - use query selector : document.guerySelector("#id/.ClassName/tag")
         - use query selectorAll: document.guerySelectorAll("#id/.ClassName/tag")
    5.HTML Events : mouse, keyboard, touch related events
        - user will trigger events to change the behaviour of webpage
    6. Binding Events : eventname = function-name(),define the behaviourin a function and call the function when a event is occur in a html element
    7. Access/updating content of an html element
         - innerHTML
         - innerTEXT
    8.Permanent storage in browser
            -Local storage : data stored as key and value pair, but here both key and value type must be 'string'
                -setItem(key,value)
        9.API(Application programming Interface)
            -REST (Representational Sate Trancefer) API :user client-server app
            -URL (Uniform Resource Locator)
            -HTTP (Hyper Text Transfer Protocol)
            -HTTP Response , status code
                  -1xx : Informational
                  -2xx : Sucecuss
                  -3xx : Redirection
        10.Handling functions in JS
            -Synchronous Functions : execute without any time delay
            -Asynchronous Functions : executes after a time delay, js uses event loop to resolve Asynchronous functions
                   -Handling Asynchronous Functions in JS
                       
                             -callabck function : it leads callabck hell
                             -promise : used to resolve api call
                                -every promise has 2 state
                                     - resolved state : whenever we get a Response for a Recuest, to access response from resolve 
                   -Different type of Asynchronous functions in JS                          
                        -CallBack Functions : may lead to callabck hell (Nesting of CallBack functions)
                        -API Calls : Handling api call (AJAX : Asynchronous javascript XML , using js make api call)
                             -using XMLHTTPRequest class
                             -using fetch method : based on promise
                             -using axios library : based on promise     


    --------------------------------------------------------------------------
                REACT - FRONT END TECHNOLOGY : JS LIBRARY
    --------------------------------------------------------------------------
---------------------------------------------------------
                REACT - FRONT END TECHNOLOGY : JS LIBRARY
        ---------------------------------------------------------

        1. React Basic Concepts 
            - React App : Which is a collection of JS library
            - React app used to build a Single page Application
            - React App is a collection of Components, Components used to display content in browser, all Components are arranged as a tree structure in React app, root node / root component of React app will always 'App' Component
            - Pure Function : used to bluid Components, which doesn't cause side effects to the applications.
            - React uses Declarative Approach : react have its own elemets and events for creating webpage.
            - Virtual DOM : Light weight representation of real DOM, it helps faster loading of content in app.
            - Babel library : Transiple JSX code to simple React functions which is understood by browser.
            - JSX (Javascript XML - Javascript extension for HTML code) used to display contents in browser.
                - JSX Elements : const heading = <h1> Heading </h1>

                - Rules of JSX Code 
                    - Every JSX Elements must be in a parent/container tag, this container tag can be div/section/article........ or React fragment (tag without name) <></>
                    - Every JSX Element must have an ending/closing tag, <tag-name> content </tag-name>
                   <tag-name/> (self closing tag : used to represent tag without content)
                    - JSX follow camel word : if a word has two words then the second word's first letter must be in capital case eg :- fontSize instead for font-size
                    - Instead of using attribute 'class'  use 'className'
                    - Instead of using attribute 'for'  use 'htmlFor'
                    - We can use JS code directly in JSX, use {} to provide JS code in JSX, ex :- {js code}
        
        2. React App Creation
            - CRA (using create-react-app Command)
            - Vite : It is a web project building tool
                - Install Vite globally : npm i -g create-vite 
                - react app using vite : npm create vite@latest
                -       "             in single command : npm create vite@latest reactAppName -- --template react 
                - to run react app using vite : npm run dev
                - to get build folder to deploy : npm run build, after that use dist folder for deployment
        
        3. Files & Folder Structure of React app using Vite
            - package.json file : npm Configuration file
            - package-lock.json file : used to store version history of packages used in the project
            - .gitignore file : used to mention data to be ignored while adding to git
            - eslint.config.js file : js Configuration
            - index.html : entry point, It's body must contain a div with id as root, include main.jsx file using script tag
            - node_modules folder : used to store external package dependencies in local project (if you have     'package.json ' file, then to generate node_modules use command : npm install) 
            - public folder : data inside public folder available globally in project
            - src folder : source folder, define logic of react app here
                - main.jsx file :createRoot() used to render react app in DOM element with id as root
                - index.css / App.css files : used to style jsx elements
                - App.jsx file : root component of react app
                - assets folder : used to store media files in our react app
       
        4. Components in REACT : used to display contents in browser
            - To create a component in react : 2 ways :- create js/jsx file, and it's file name must be starts with capital letter
                - Functional based Components / Stateless Components  : it use js pure function with its name is same as its file name and function must return jsx code
                - Class based Components / Stateful Component 
            
            - Difference between Class vs Function based Components

        Class based Components                                          Functional based Components
    -------------------------------                                   ---------------------------------
   
    1. using JS Class to inherit from react                          1. using JS pure function and return JSX
    component, and render JSX

    2. Component will live depending on different                    2. It executes from top to bottom , once it 
     Lifecycle methods                                                  returns,it cannot be alive

    3. Stateful Component                                            3.  Stateless Components

    4. Do not use Hooks                                              4. Use Hooks

    5. Lifecycle methods are available                               5. Lifecycle methods are not available

    6 Uses render method to display JSX into DOM                     6. No need to use render method

    7. Use constructor to Initialise state                           7. No need to use constructor


        5. Data Sharing in React App
            - Parent to Child Data Sharing : child can access data from parent using 'props'

        6. Props in React : props means property of a component, and props will be the arguments of that component, and it type is object, it used to transfer data from parent to child and it is immutable ie, it cannot be changed
         
         (render : display contents in browser )
        7. Conditional Rendering : based on a condition display jsx elements into browser, use if(&&), if-else (?:) these operator to render jsx unto browser

        8. CSS Styling in React :
            - Inline CSS in jsx : using style attribute, we can pass style as object, eg:- style = {{property:value , .....}}
            - External CSS in jsx : define css style in an external file and to apply we have to import css file in component
                - import 'css file path'
            - CSS Module file : use extension .module.css file, here it can import to a variable in a component, define style using class in module css file

        9. Events Handling in React : according to each event jsx element has to bind/call a function
            - Calling function without arguments : event={functionName}
            - Calling function with arguments : event={()=>{functionName(arg1,.......)}}
            - Calling function with arguments as Event : event={(event)=>{functionName(event)}}

        10. Array in React JSX : use map method to display array in JSX, to uniquely identify each item use 'key' props
       
        11. State : it is used to store values in a component, whenever state changes then component will re-render. 
            - To update state : use setState(value)

        12. Lifecycle Methods of React Component
            - Mounting Phase : putting component into browser
                - constructor()
                - getDerivedStateFromProps()
                - render()
                - componentDidMount()
            - Upadating Phase : when component updating
                - getDerivedStateFromProps()
                - shouldComponentUpdate()
                - render()
                - getSnapshotBeforeUpdate()
                - componentDidUpdate()
            - Unmounting Phase : Removing component from DOM
                - componentWillUnmount()

        13. React-Hooks : used to provide react component features to Functional based component. They are predefined functions, that function name must start with 'use' keyword, to use hooks in functional component must call it
            - Rules to use Hook in Functional Components
                - Import Hook from react in component
                - Call hooks in top level of a Component
                - Hooks cannot be Conditional
            - Types of Hooks
                - Predefined Hooks
                    - useState(initial-value) : used to create state in functional component, it will return state value and function to update state value and stored in an array
                    
                    - useEffect(side effect function,dependency) : used to provide side effects to the component
                        - side effect function : used to define which side effect to applied in component
                        - dependency : used to control when useEffect hook must be call in a component
                            - no dependency : useEffect hook will call all the time in component (it become an infinite loop)
                            - [] : useEffect hook will call only at the time of component Creation
                            - [state/props/variable] : useEffect hook will call at the time of component Creation as well as changes in the value of state/props/variable passed in the dependency
                
                - Custom Hooks : userdefined hooks
                    - Create a fuction with name starts with 'use'

    14. External React Component Libraries
        Run the following command to add Material UI to your project:
            npm install @mui/material @emotion/react @emotion/styled

    15. Handling forms in React : react can handle forms in 2 ways
        - Controlled Component : In a component, form data is managed by component state
        - Uncontrolled component : form data is managed by DOM reference in a component